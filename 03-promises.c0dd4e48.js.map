{"mappings":"iiBAAA,IAOIA,EACAC,EACAC,EATJC,EAAAC,EAAA,SAEMC,EAAYC,SAASC,cAAc,kBACnCC,EAAWF,SAASC,cAAc,iBAClCE,EAAWH,SAASC,cAAc,mBAClCG,EAAOJ,SAASC,cAAc,SAkCpC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACvBL,EACFI,EAAQ,CAAEN,WAAUQ,MAAAP,IAEpBM,EAAO,CAAEP,WAAUQ,MAAAP,OAlCzBH,EAAKW,iBAAiB,SAAS,WAC7BrB,GAASK,EAAUiB,MACnBrB,GAAQO,EAASc,MACjBpB,GAAUO,EAASa,SAGrBZ,EAAKW,iBAAiB,UAAU,SAAAE,GAC9BA,EAAMC,iBACN,IAAK,IAAIC,EAAW,EAAGA,GAAYvB,EAAQuB,GAAY,EACrDd,EAAcc,EAAUzB,GACrB0B,MAAK,SAAAC,G,IAAGf,EAAQe,EAARf,SAAUgB,EAAKD,EAALP,MACjBS,YAAW,WACTC,EAAA3B,GAAS4B,OAAOC,QACd,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANL,EAAM,SAE/CA,MAEJM,OAAM,SAAAP,G,IAAGf,EAAQe,EAARf,SAAUuB,EAAKR,EAALP,MAClBS,YAAW,WACTC,EAAA3B,GAAS4B,OAAOK,QACd,sBAAqCH,OAAfrB,EAAS,QAAYqB,OAANE,EAAM,SAE5CA,MAEPnC,GAASC,K","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayTime = document.querySelector('[name = delay]');\nconst stepTime = document.querySelector('[name = step]');\nconst quantity = document.querySelector('[name = amount]');\nconst form = document.querySelector('.form');\n\nlet delay;\nlet step;\nlet amount;\n\nform.addEventListener('input', () => {\n  delay = +delayTime.value;\n  step = +stepTime.value;\n  amount = +quantity.value;\n});\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        }, delay);\n      })\n      .catch(({ position, delay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        }, delay);\n      });\n    delay += step;\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$delayTime","document","querySelector","$ce04d3a99e08e73b$var$stepTime","$ce04d3a99e08e73b$var$quantity","$ce04d3a99e08e73b$var$form","$ce04d3a99e08e73b$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","delay","addEventListener","value","event","preventDefault","position1","then","param","delay1","setTimeout","$parcel$interopDefault","Notify","success","concat","catch","delay2","failure"],"version":3,"file":"03-promises.c0dd4e48.js.map"}